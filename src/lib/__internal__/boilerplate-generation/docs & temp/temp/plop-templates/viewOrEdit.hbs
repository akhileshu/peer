"use client";

import { AppCard } from "@/components/app/card";
import { renderStatusMessage } from "@/components/app/status-message/renderStatusMessage";
import { Button } from "@/lib/forms-inputs/button";
import AppForm from "@/lib/forms-inputs/form";
import { Input } from "@/lib/forms-inputs/Input";
import { MultiSelect } from "@/lib/forms-inputs/MultiSelect";
import { Select } from "@/lib/forms-inputs/Select";
import { useHandleFormState } from "@/lib/form-and-inputs/useHandleFormState";
import { useEditToggle } from "@/lib/forms-inputs/utils";
import { initialState } from "@/lib/server-actions/handleAction";
import { cn } from "@/lib/utils";
import { useActionState, useEffect } from "react";

type ViewOrEdit{{pascalCase name}}Props = {
  className?: string;
  {{camelCase name}}Result: Awaited<ReturnType<typeof placeholderActionFn>>;
};

export function ViewOrEdit{{pascalCase name}}({
  {{camelCase name}}Result,
  className,
}: ViewOrEdit{{pascalCase name}}Props) {
    const cardTitle = "{{pascalCase name}}";
  const { editing, startEditing, cancelEditing } = useEditToggle();
const statusMessage = renderStatusMessage({{camelCase name}}Result, cardTitle);
  if (statusMessage || !{{camelCase name}}Result.ok) return statusMessage;

  const { data } = {{camelCase name}}Result;
  return (
    <AppCard title={cardTitle} className={cn("space-y-2", className)}>
      {!editing && (
        <Button onClick={startEditing}>
          Edit {{pascalCase name}}
        </Button>
      )}

      {editing ? (
        <Edit{{pascalCase name}}Form {{camelCase name}}={data} onCancel={cancelEditing} />
      ) : (
        <View{{pascalCase name}} {{camelCase name}}={data} />
      )}
    </AppCard>
  );
}

function Edit{{pascalCase name}}Form({
  {{camelCase name}},
  onCancel,
}: {
  {{camelCase name}}: any;
  onCancel: () => void;
}) {
  const [state, formAction, isPending] = useActionState(
    placeholderActionFn,
    initialState
  );
  const { fieldErrors } = state ?? {};

  useHandleFormState({
    state,
    revalidatePath: "/placeholderPath",
  });

  useEffect(() => {
    if (state.ok) {
      onCancel();
    }
  }, [onCancel, state.ok]);

  return (
    <AppForm
      className="space-y-4 max-w-md"
      action={formAction}
      variant="default"
      submitVariant="default"
      submitProps={ {
        isPending,
        buttonState: { disabled: isPending },
        label: "Update {{pascalCase name}}",
      } }
    >
      <p>Edit form goes here.</p>
      <Button
        className="mr-2 text-red-600"
        disabled={isPending}
        onClick={onCancel}
      >
        Cancel
      </Button>
    </AppForm>

  );
}

function View{{pascalCase name}}({ {{camelCase name}} }: { {{camelCase name}}: any }) {
    return (
    <div className="space-y-2 text-sm text-gray-800">
      <p>Replace with actual read-only view</p>
      <pre>{JSON.stringify({{camelCase name}}, null, 2)}</pre>
    </div>
  );
}
