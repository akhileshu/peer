import { Question } from "inquirer";
import { ActionType, NodePlopAPI } from "plop";
import { registerHelpers, templatePaths } from "./utils";
import { FeatureConfig, PlopData } from "./types";
import { featuresList } from "./features.json";

export default function generate(plop: NodePlopAPI) {
  registerHelpers(plop);

  // Action generators
  const getActionsForFeature = (feature: FeatureConfig) => {
    const actions: ActionType[] = [];

    // Components
    if (feature.components?.length) {
      feature.components.forEach((component) => {
        actions.push({
          type: "add",
          path: `src/features/${feature.name}/components/${component}/${component}.tsx`,
          templateFile: templatePaths.component,
          data: { name: component, hooks: feature.hooks, store: feature.store },
        });
      });
    }

    // API Routes
    if (feature.apiRoutes?.length) {
      feature.apiRoutes.forEach((route) => {
        actions.push({
          type: "add",
          path: `src/features/${feature.name}/api/${route}/route.ts`,
          templateFile: templatePaths.apiRoute,
          data: {
            name: route,
            zodSchemas: feature.zodSchemas,
            serverActions: feature.serverActions,
          },
        });
      });
    }

    // Models
    if (feature.dbModel?.length) {
      feature.dbModel.forEach((model) => {
        actions.push({
          type: "add",
          path: `src/features/${feature.name}/models/${model}.ts`,
          templateFile: templatePaths.model,
          data: { name: model, types: feature.types },
        });
      });
    }

    // Hooks
    if (feature.hooks?.length) {
      feature.hooks.forEach((hook) => {
        actions.push({
          type: "add",
          path: `src/features/${feature.name}/hooks/use${hook}.ts`,
          templateFile: templatePaths.hook,
          data: {
            name: hook,
            apiRoutes: feature.apiRoutes,
            types: feature.types,
          },
        });
      });
    }

    // Store
    if (feature.store) {
      actions.push({
        type: "add",
        path: `src/features/${feature.name}/store/${feature.store
          .replace("use", "")
          .replace("Store", "")}.ts`,
        templateFile: templatePaths.store,
        data: {
          name: feature.store.replace("use", "").replace("Store", ""),
          types: feature.types,
        },
      });
    }

    // Zod Schemas
    if (feature.zodSchemas?.length) {
      feature.zodSchemas.forEach((schema) => {
        actions.push({
          type: "add",
          path: `src/features/${feature.name}/schemas/${schema}.ts`,
          templateFile: templatePaths.schema,
          data: { name: schema },
        });
      });
    }

    // Types
    if (feature.types?.length) {
      feature.types.forEach((type) => {
        actions.push({
          type: "add",
          path: `src/features/${feature.name}/types/${type}.ts`,
          templateFile: templatePaths.type,
          data: { name: type },
        });
      });
    }

    // Services
    if (feature.services?.length) {
      feature.services.forEach((service) => {
        actions.push({
          type: "add",
          path: `src/features/${feature.name}/services/${service}.ts`,
          templateFile: templatePaths.service,
          data: {
            name: service,
            types: feature.types,
            zodSchemas: feature.zodSchemas,
            dbModel: feature.dbModel,
          },
        });
      });
    }

    // Tests
    if (feature.tests) {
      // Component tests
      if (feature.tests.components?.length) {
        feature.tests.components.forEach((test) => {
          const componentName = test.replace(".test.tsx", "");
          actions.push({
            type: "add",
            path: `src/features/${feature.name}/tests/components/${test}`,
            templateFile: templatePaths.componentTest,
            data: { name: componentName },
          });
        });
      }

      // API tests
      if (feature.tests.api?.length) {
        feature.tests.api.forEach((test) => {
          const apiName = test.replace(".test.ts", "");
          actions.push({
            type: "add",
            path: `src/features/${feature.name}/tests/api/${test}`,
            templateFile: templatePaths.apiTest,
            data: { name: apiName },
          });
        });
      }
    }

    // Pages
    if (feature.pages?.length) {
      feature.pages.forEach((page) => {
        const pageName = page.replace(/[\/\(\)\[\]]/g, "");
        actions.push({
          type: "add",
          path: `src/features/${feature.name}/pages${page}/page.tsx`,
          templateFile: templatePaths.page,
          data: {
            name: pageName,
            components: feature.components,
            hooks: feature.hooks,
            store: feature.store,
          },
        });
      });
    }

    // Index files
    if (feature.components?.length) {
      actions.push({
        type: "add",
        path: `src/features/${feature.name}/components/index.ts`,
        templateFile: templatePaths.index,
        data: { exports: feature.components },
      });
    }

    if (feature.hooks?.length) {
      actions.push({
        type: "add",
        path: `src/features/${feature.name}/hooks/index.ts`,
        templateFile: templatePaths.index,
        data: { exports: feature.hooks.map((h) => `use${h}`) },
      });
    }

    if (feature.apiRoutes?.length) {
      actions.push({
        type: "add",
        path: `src/features/${feature.name}/api/index.ts`,
        templateFile: templatePaths.index,
        data: { exports: feature.apiRoutes },
      });
    }

    return actions;
  };

  // Main generator
  plop.setGenerator("feature", {
    description: "Generate a new feature with all boilerplate",
    prompts: [
      {
        type: "list",
        name: "featureName",
        message: "Select feature to generate:",
        choices: featuresList.map((f) => f.name),
      },
      {
        type: "checkbox",
        name: "partsToGenerate",
        message: "Select parts to generate:",
        choices: (answers: PlopData) => {
          const feature = featuresList.find(
            (f) => f.name === answers.featureName
          )!;
          const choices = [];

          if (feature.components)
            choices.push({ name: "Components", value: "components" });
          if (feature.apiRoutes)
            choices.push({ name: "API Routes", value: "apiRoutes" });
          if (feature.dbModel)
            choices.push({ name: "Database Models", value: "dbModel" });
          if (feature.hooks) choices.push({ name: "Hooks", value: "hooks" });
          if (feature.store) choices.push({ name: "Store", value: "store" });
          if (feature.zodSchemas)
            choices.push({ name: "Zod Schemas", value: "zodSchemas" });
          if (feature.types) choices.push({ name: "Types", value: "types" });
          if (feature.services)
            choices.push({ name: "Services", value: "services" });
          if (feature.tests) choices.push({ name: "Tests", value: "tests" });
          if (feature.pages) choices.push({ name: "Pages", value: "pages" });

          return choices;
        },
        default: (answers: PlopData) => {
          const feature = featuresList.find(
            (f) => f.name === answers.featureName
          )!;
          return Object.keys(feature).filter(
            (key) =>
              key !== "name" &&
              feature[key as keyof FeatureConfig] &&
              (Array.isArray(feature[key as keyof FeatureConfig])
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                ? (feature[key as keyof FeatureConfig] as any[]).length > 0
                : true)
          );
        },
      } as Question,
    ],
    actions: function (data) {
      const { featureName } = data as PlopData;
      const featureConfig = featuresList.find((f) => f.name === featureName)!;
      return getActionsForFeature(featureConfig);
    },
  });
}
