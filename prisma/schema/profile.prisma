model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  image              String?
  accounts           Account[]
  sessions           Session[]
  isProfileSetupDone Boolean   @default(false)

  // Core Relations
  preferences UserPreference?
  connections Connection[]    @relation("UserConnections")
  Connection  Connection[] // Optional: reverse relation

  @@map("users")
}

model UserPreference {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  persona          PersonaType
  areaOfFocus      AreaOfFocus?
  availability     Availability?
  matchPreferences MatchPreference[]
  // domain           Domain?
  // skills           String[] // e.g., ["React", "Node.js", "Docker"]
  // interests        String[] // e.g., ["Open Source", "System Design"]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  availabilityId String?

  @@map("UserPreferences")
}

model AreaOfFocus {
  id        String     @id
  name      String     @unique
  skills    Skill[]    @relation("FocusSkills")
  interests Interest[] @relation("FocusInterests")

  // Relation to UserPreference (optional)
  userPreferences   UserPreference? @relation(fields: [userPreferencesId], references: [id])
  userPreferencesId String?         @unique // Removed `@unique` to allow multiple focuses per pref

  @@map("area_of_focus")
}

model Skill {
  id      String        @id
  label   String
  focuses AreaOfFocus[] @relation("FocusSkills")
}

model Interest {
  id      String        @id
  label   String
  focuses AreaOfFocus[] @relation("FocusInterests")
}

model Availability {
  id               String         @id @default(cuid())
  UserPreference   UserPreference @relation(fields: [UserPreferenceId], references: [id])
  UserPreferenceId String         @unique
  preferredDays    Weekday[]
  startTime        String // "18:00"
  endTime          String // "21:00"
  prefersWeekends  Boolean
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum PersonaType {
  LEARNER
  MENTOR
  COLLABORATOR
  PRODUCT_IMPROVER
  SHOWCASER
  NETWORKER
}

enum MatchPreference {
  SimilarInterest
  SimilarLevel
  SharedGoals
}

/**
 * enum Domain {
 * Frontend
 * Backend
 * DevOps
 * Fullstack
 * Mobile
 * Data
 * }
 */

model Connection {
  id         String           @id @default(cuid())
  fromUserId String
  toUserId   String
  status     ConnectionStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  fromUser User @relation("UserConnections", fields: [fromUserId], references: [id])
  toUser   User @relation(fields: [toUserId], references: [id])
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}
