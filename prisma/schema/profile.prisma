model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  image              String?
  accounts           Account[]
  sessions           Session[]
  isProfileSetupDone Boolean   @default(false)

  // role Role @default(DEVELOPER)

  availability     Availability?
  intents          UserIntent[]
  matchPreferences MatchPreference[]
  domain           Domain?
  skills           String[] // freeform or tag-based skills e.g., React, Node.js, Docker
  interests        String[] // optional: ["Open Source", "Hackathons",  System Design, AI]
  sentRequests     FriendRequest[]   @relation("SentRequests")
  receivedRequests FriendRequest[]   @relation("ReceivedRequests")

  @@map("users")
}

model Availability {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  preferredDays   Weekday[]
  startTime       String // "18:00"
  endTime         String // "21:00"
  prefersWeekends Boolean
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum UserIntent {
  Learn
  Collaborate
  ContributeOrMentor
  GetHelp
}

enum MatchPreference {
  SimilarInterest
  SimilarLevel
  SharedGoals
}

enum Domain {
  Frontend
  Backend
  DevOps
  Fullstack
  Mobile
  Data
}

model FriendRequest {
  id         String        @id @default(uuid())
  sender     User          @relation("SentRequests", fields: [senderId], references: [id])
  senderId   String
  receiver   User          @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}
